gamma_med <- median(Delta_UT)
w_med = gamma_med/(1-gamma_med)
losses <- apply(labs, 1, mergeloss, Delta_lt = Delta_H[lower.tri(Delta_H)], w=w_avg)
# minimize
min_loss <- which.min(losses)
c.fold = labs[min_loss,]
K[1] <- length(unique(c.fold))
ari[1] <- round(adjustedRandIndex(c.fold,s),3)
# W & G estimate
c.psm <- mcclust::comp.psm(z)
c.mv <- mcclust.ext::minVI(psm = c.psm,
cls.draw = z,
max.k = 20)
c.VI <- c.mv$cl
K[2] <- length(unique(c.VI))
ari[2] <- round(adjustedRandIndex(c.VI,s),3)
# W & G estimate -- Binder's Loss
c.b <- mcclust::minbinder(psm = c.psm,
cls.draw = z,
max.k = 20)
c.Binder <- c.b$cl
K[3] <- length(unique(c.Binder))
ari[3] <- round(adjustedRandIndex(c.Binder,s),3)
# Mclust
mcl <- mclust::Mclust(y, G=1:max.k)
c.mcl <- mcl$classification
K[4] <- length(unique(c.mcl))
ari[4] <- round(adjustedRandIndex(c.mcl,s),3)
K
ari
Rcpp::sourceCpp("rcppfuncts/mnorm_D_arma.cpp")
ari <- c()
K <- c()
samp <- multivar.skewed(n =  n,
Pi = c(0.45, 0.25, 0.3),
xi = matrix(c(6.5,5,
0,0,
-5,-5), byrow = T, nrow = 3),
Omega = array(c(1,0,0,1,5,0,0,2,3,0,0,1), c(2,2,3)),
alpha = matrix(c(1,1,
-10,15,
4,-17), byrow = T, nrow = 3))
s <- samp$s # true labels
y <- samp$data # data
y <- scale(y) # scaled
d <- ncol(y)
# fitting
fit <- mvnorm_gibbs(S = S,
y = y,
L = L,
alpha = rep(1/2,L), # rep((d/2)+2,L)
w = rep(0,d),
kappa = 1,
r = d+2,
C = diag(1,d),
stops = S)
# burn-out
theta <- fit$theta[-(1:B)]
M <- length(theta)
n <- nrow(y)
theta <- array(unlist(theta), dim = c(n, 2*d + choose(d,2), M))
z <- fit$z[-(1:B),]
# thin
trip_ind <- seq(3,M,by=3)
theta <- theta[,,trip_ind]
z <- z[trip_ind,]
# apply hellinger distance function
Delta_UT <- makeHellingerAvg(theta = theta, d = d, n = n)
Delta <- matrix(0, nrow = n, ncol = n)
Delta[upper.tri(Delta)] <- Delta_UT
Delta <- Delta + t(Delta)
Delta_H <- Delta
# complete-linkage
Delta <- as.dist(Delta)
cl <- hclust(Delta, method = "complete")
# list of possible clusterings
max.k <- 20  # maximum number of clusters
labs <- matrix(0, nrow = max.k, ncol = n)
for (h in 1:max.k){
labs[h,] = cutree(cl, k = h)
}
w_avg <- sum(Delta_UT)/(sum(1 - Delta_UT))
gamma_med <- median(Delta_UT)
w_med = gamma_med/(1-gamma_med)
losses <- apply(labs, 1, mergeloss, Delta_lt = Delta_H[lower.tri(Delta_H)], w=w_avg)
# minimize
min_loss <- which.min(losses)
c.fold = labs[min_loss,]
K[1] <- length(unique(c.fold))
ari[1] <- round(adjustedRandIndex(c.fold,s),3)
# W & G estimate
c.psm <- mcclust::comp.psm(z)
c.mv <- mcclust.ext::minVI(psm = c.psm,
cls.draw = z,
max.k = 20)
c.VI <- c.mv$cl
K[2] <- length(unique(c.VI))
ari[2] <- round(adjustedRandIndex(c.VI,s),3)
# W & G estimate -- Binder's Loss
c.b <- mcclust::minbinder(psm = c.psm,
cls.draw = z,
max.k = 20)
c.Binder <- c.b$cl
K[3] <- length(unique(c.Binder))
ari[3] <- round(adjustedRandIndex(c.Binder,s),3)
# Mclust
mcl <- mclust::Mclust(y, G=1:max.k)
c.mcl <- mcl$classification
K[4] <- length(unique(c.mcl))
ari[4] <- round(adjustedRandIndex(c.mcl,s),3)
K
ari
plot(y)
n <- 1000
Rcpp::sourceCpp("rcppfuncts/mnorm_D_arma.cpp")
ari <- c()
K <- c()
samp <- multivar.skewed(n =  n,
Pi = c(0.45, 0.25, 0.3),
xi = matrix(c(6.5,5,
0,0,
-5,-5), byrow = T, nrow = 3),
Omega = array(c(1,0,0,1,5,0,0,2,3,0,0,1), c(2,2,3)),
alpha = matrix(c(1,1,
-10,15,
4,-17), byrow = T, nrow = 3))
s <- samp$s # true labels
y <- samp$data # data
y <- scale(y) # scaled
d <- ncol(y)
# fitting
fit <- mvnorm_gibbs(S = S,
y = y,
L = L,
alpha = rep(1/2,L), # rep((d/2)+2,L)
w = rep(0,d),
kappa = 1,
r = d+2,
C = diag(1,d),
stops = S)
# burn-out
theta <- fit$theta[-(1:B)]
M <- length(theta)
n <- nrow(y)
theta <- array(unlist(theta), dim = c(n, 2*d + choose(d,2), M))
z <- fit$z[-(1:B),]
# thin
trip_ind <- seq(3,M,by=3)
theta <- theta[,,trip_ind]
z <- z[trip_ind,]
# apply hellinger distance function
Delta_UT <- makeHellingerAvg(theta = theta, d = d, n = n)
Delta <- matrix(0, nrow = n, ncol = n)
Delta[upper.tri(Delta)] <- Delta_UT
Delta <- Delta + t(Delta)
Delta_H <- Delta
# complete-linkage
Delta <- as.dist(Delta)
cl <- hclust(Delta, method = "complete")
# list of possible clusterings
max.k <- 20  # maximum number of clusters
labs <- matrix(0, nrow = max.k, ncol = n)
for (h in 1:max.k){
labs[h,] = cutree(cl, k = h)
}
w_avg <- sum(Delta_UT)/(sum(1 - Delta_UT))
gamma_med <- median(Delta_UT)
w_med = gamma_med/(1-gamma_med)
losses <- apply(labs, 1, mergeloss, Delta_lt = Delta_H[lower.tri(Delta_H)], w=w_avg)
# minimize
min_loss <- which.min(losses)
c.fold = labs[min_loss,]
K[1] <- length(unique(c.fold))
ari[1] <- round(adjustedRandIndex(c.fold,s),3)
# W & G estimate
c.psm <- mcclust::comp.psm(z)
c.mv <- mcclust.ext::minVI(psm = c.psm,
cls.draw = z,
max.k = 20)
c.VI <- c.mv$cl
K[2] <- length(unique(c.VI))
ari[2] <- round(adjustedRandIndex(c.VI,s),3)
# W & G estimate -- Binder's Loss
c.b <- mcclust::minbinder(psm = c.psm,
cls.draw = z,
max.k = 20)
c.Binder <- c.b$cl
K[3] <- length(unique(c.Binder))
ari[3] <- round(adjustedRandIndex(c.Binder,s),3)
# Mclust
mcl <- mclust::Mclust(y, G=1:max.k)
c.mcl <- mcl$classification
K[4] <- length(unique(c.mcl))
ari[4] <- round(adjustedRandIndex(c.mcl,s),3)
K
ari
plot(y)
n=2500
Rcpp::sourceCpp("rcppfuncts/mnorm_D_arma.cpp")
ari <- c()
K <- c()
samp <- multivar.skewed(n =  n,
Pi = c(0.45, 0.25, 0.3),
xi = matrix(c(6.5,5,
0,0,
-5,-5), byrow = T, nrow = 3),
Omega = array(c(1,0,0,1,5,0,0,2,3,0,0,1), c(2,2,3)),
alpha = matrix(c(1,1,
-10,15,
4,-17), byrow = T, nrow = 3))
s <- samp$s # true labels
y <- samp$data # data
y <- scale(y) # scaled
d <- ncol(y)
# fitting
fit <- mvnorm_gibbs(S = S,
y = y,
L = L,
alpha = rep(1/2,L), # rep((d/2)+2,L)
w = rep(0,d),
kappa = 1,
r = d+2,
C = diag(1,d),
stops = S)
# burn-out
theta <- fit$theta[-(1:B)]
M <- length(theta)
n <- nrow(y)
theta <- array(unlist(theta), dim = c(n, 2*d + choose(d,2), M))
z <- fit$z[-(1:B),]
# thin
trip_ind <- seq(3,M,by=3)
theta <- theta[,,trip_ind]
z <- z[trip_ind,]
# apply hellinger distance function
Delta_UT <- makeHellingerAvg(theta = theta, d = d, n = n)
Delta <- matrix(0, nrow = n, ncol = n)
Delta[upper.tri(Delta)] <- Delta_UT
Delta <- Delta + t(Delta)
Delta_H <- Delta
# complete-linkage
Delta <- as.dist(Delta)
cl <- hclust(Delta, method = "complete")
# list of possible clusterings
max.k <- 20  # maximum number of clusters
labs <- matrix(0, nrow = max.k, ncol = n)
for (h in 1:max.k){
labs[h,] = cutree(cl, k = h)
}
w_avg <- sum(Delta_UT)/(sum(1 - Delta_UT))
gamma_med <- median(Delta_UT)
w_med = gamma_med/(1-gamma_med)
losses <- apply(labs, 1, mergeloss, Delta_lt = Delta_H[lower.tri(Delta_H)], w=w_avg)
# minimize
min_loss <- which.min(losses)
c.fold = labs[min_loss,]
K[1] <- length(unique(c.fold))
ari[1] <- round(adjustedRandIndex(c.fold,s),3)
# W & G estimate
c.psm <- mcclust::comp.psm(z)
c.mv <- mcclust.ext::minVI(psm = c.psm,
cls.draw = z,
max.k = 20)
c.VI <- c.mv$cl
K[2] <- length(unique(c.VI))
ari[2] <- round(adjustedRandIndex(c.VI,s),3)
# W & G estimate -- Binder's Loss
c.b <- mcclust::minbinder(psm = c.psm,
cls.draw = z,
max.k = 20)
c.Binder <- c.b$cl
K[3] <- length(unique(c.Binder))
ari[3] <- round(adjustedRandIndex(c.Binder,s),3)
# Mclust
mcl <- mclust::Mclust(y, G=1:max.k)
c.mcl <- mcl$classification
K[4] <- length(unique(c.mcl))
ari[4] <- round(adjustedRandIndex(c.mcl,s),3)
K
ari
### simulation study given in the Supplementary Material ###
# see the file "clusterspirals.R" in the "rfuncts" folder for one replication
# packages
library(grid)
library(gridExtra)
library(Rcpp)
library(RcppArmadillo)
library(foreach)
library(doParallel)
library(plyr)
library(dplyr)
library(reshape2)
# r functions
source("rfuncts/mvnorm_gibbs.R")
source("rfuncts/mnorm_D_apply.R")
source("rfuncts/mergeloss.R")
source("rfuncts/clusterspirals.R")
source("rfuncts/foldball.R")
sourceCpp("rcppfuncts/mnorm_D_arma.cpp")
# parallel computing
n.cores <- 10
## create the cluster
my.cluster <- parallel::makeCluster(
n.cores,
type = "PSOCK"
)
## register it to be used by %dopar%
doParallel::registerDoParallel(cl = my.cluster)
# parallel loop
N <- 300
R <- 100
x <- foreach(r = 1:R,
.packages = c("mcclust", "Rcpp", "cluster", "KODAMA", "mcclust.ext"),
.noexport = c("ldmvnorm_arma",
"maketau",
"makeSigma",
"makeSigmacube",
"makeSigmaDet",
"mnorm_D_arma",
"makeHellingerAvg")) %dopar% {
clusterspirals(N=N)
}
sims <- matrix(unlist(x), ncol = 3, byrow=TRUE)
sims_means <- colMeans(sims)
round(sims_means,3)
sims_sd <- apply(sims, 2, sd)
round(sims_sd, 3)
N=150
clusterspirals <- function(N) {
# N = c(300,200,100)
# packages
library(sn)
library(ggplot2)
library(dplyr)
library(mcclust.ext)
library(RColorBrewer)
library(ggsci)
library(kernlab)
library(reshape2)
library(KODAMA)
# moons data
d <- 2
data <- KODAMA::spirals(n = c(N/3,N/3,N/3), sd = c(0.3,0.25,0.15))
truth <- rep(1:3, each = N/3)
y <- scale(data)
K_0 <- 3
# fitting a GMM
source("rfuncts/mvnorm_gibbs.R")
source("rfuncts/mnorm_D_apply.R")
sourceCpp("rcppfuncts/mnorm_D_arma.cpp")
S <- 15000 # iterations
B <- 1000 # burnin
L <- 30 # number of components
sig_sq <- 0.5
# fitting
fit <- mvnorm_gibbs(S = S,
y = y,
L = L,
alpha = rep(1/2,L),
w = rep(0,d),
kappa = sig_sq/(2),
r = d+2,
C = sig_sq*diag(1,d),
stops = 50)
# burn-out
theta <- fit$theta[-(1:B)]
M <- length(theta)
n <- nrow(y)
theta <- array(unlist(theta), dim = c(n, 2*d + choose(d,2), M))
z <- fit$z[-(1:B),]
# thin
trip_ind <- seq(4,M,by=4)
theta <- theta[,,trip_ind]
z <- z[trip_ind,]
# FOLD
Delta_UT <- makeHellingerAvg(theta = theta, d = d, n = n)
Delta <- matrix(0, nrow = n, ncol = n)
Delta[upper.tri(Delta)] <- Delta_UT
Delta <- Delta + t(Delta)
Delta_H <- Delta
# average-linkage
Delta <- as.dist(Delta)
cl <- hclust(Delta, method = "average")
# list of possible clusterings
max.k <- 10  # maximum number of clusters
labs <- matrix(0, nrow = max.k, ncol = n)
for (h in 1:max.k){
labs[h,] = cutree(cl, k = h)
}
w_avg <- sum(Delta_UT)/(sum(1 - Delta_UT))
losses <- apply(labs, 1, mergeloss, Delta_lt = Delta_H[lower.tri(Delta_H)], w=w_avg)
# minimize
min_loss <- which.min(losses)
c.fold = labs[min_loss,]
# credible ball and cGPSM
cgsamps <- getcGsamps(theta=theta, w=w_avg, d=2, max.k=10)
cb <- cGball(c.fold,cgsamps)
# compare clusterings
vi.fold <- mcclust::vi.dist(c.fold, truth)
# evaluations
inc <- vi.fold <= cb$dist.horiz
k_fold <- length(table(c.fold))
ari_fold <- adjustedRandIndex(c.fold, truth)
logic_vec <- c(inc, k_fold, ari_fold)
names(logic_vec) = c("Ball", "K_FOLD", "ARI")
return(logic_vec)
}
logic_vec
clusterspirals <- function(N) {
# N = c(300,200,100)
# packages
library(sn)
library(ggplot2)
library(dplyr)
library(mcclust.ext)
library(RColorBrewer)
library(ggsci)
library(kernlab)
library(reshape2)
library(KODAMA)
# moons data
d <- 2
data <- KODAMA::spirals(n = c(N/3,N/3,N/3), sd = c(0.3,0.25,0.15))
truth <- rep(1:3, each = N/3)
y <- scale(data)
K_0 <- 3
# fitting a GMM
source("rfuncts/mvnorm_gibbs.R")
source("rfuncts/mnorm_D_apply.R")
sourceCpp("rcppfuncts/mnorm_D_arma.cpp")
S <- 15000 # iterations
B <- 1000 # burnin
L <- 30 # number of components
sig_sq <- 0.5
# fitting
fit <- mvnorm_gibbs(S = S,
y = y,
L = L,
alpha = rep(1/2,L),
w = rep(0,d),
kappa = sig_sq/(2),
r = d+2,
C = sig_sq*diag(1,d),
stops = 50)
# burn-out
theta <- fit$theta[-(1:B)]
M <- length(theta)
n <- nrow(y)
theta <- array(unlist(theta), dim = c(n, 2*d + choose(d,2), M))
z <- fit$z[-(1:B),]
# thin
trip_ind <- seq(4,M,by=4)
theta <- theta[,,trip_ind]
z <- z[trip_ind,]
# FOLD
Delta_UT <- makeHellingerAvg(theta = theta, d = d, n = n)
Delta <- matrix(0, nrow = n, ncol = n)
Delta[upper.tri(Delta)] <- Delta_UT
Delta <- Delta + t(Delta)
Delta_H <- Delta
# average-linkage
Delta <- as.dist(Delta)
cl <- hclust(Delta, method = "average")
# list of possible clusterings
max.k <- 10  # maximum number of clusters
labs <- matrix(0, nrow = max.k, ncol = n)
for (h in 1:max.k){
labs[h,] = cutree(cl, k = h)
}
w_avg <- sum(Delta_UT)/(sum(1 - Delta_UT))
losses <- apply(labs, 1, mergeloss, Delta_lt = Delta_H[lower.tri(Delta_H)], w=w_avg)
# minimize
min_loss <- which.min(losses)
c.fold = labs[min_loss,]
# credible ball and cGPSM
cgsamps <- getcGsamps(theta=theta, w=w_avg, d=2, max.k=10)
cb <- cGball(c.fold,cgsamps)
# compare clusterings
vi.fold <- mcclust::vi.dist(c.fold, truth)
# evaluations
inc <- vi.fold <= cb$dist.horiz
k_fold <- length(table(c.fold))
ari_fold <- adjustedRandIndex(c.fold, truth)
logic_vec <- c(inc, k_fold, ari_fold)
names(logic_vec) = c("Ball", "K_FOLD", "ARI")
return(logic_vec)
}
test = clusterspirals(N)
install.packages("KODAMA")
test = clusterspirals(N)
View(cGball)
### file used to make plot of spirals data in Supplementary Material ###
# libraries
library(KODAMA)
library(ggplot2)
# sampling
set.seed(1996)
N <- 300
data <- KODAMA::spirals(n = c(N/3,N/3,N/3), sd = c(0.3,0.25,0.15))
truth <- rep(1:3, each = N/3)
y <- scale(data)
data_df <- data.frame(y1 = y[,1], y2 = y[,2], s0 = as.factor(truth))
# plotting
ggplot(data_df, aes(x=y1, y = y2, color = s0)) + geom_point() + theme_bw() +
xlab(" ") + ylab(" ") +
labs(title = " ", caption = "Example of the spirals data.") +
theme(panel.border = element_blank(),
#panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
plot.caption = element_text(hjust=0.5),
text = element_text(size=14))
